# Nome do workflow que aparecer√° na interface do GitHub Actions
# Este nome ser√° exibido na aba "Actions" do reposit√≥rio
name: "üìã Listas de Reprodu√ß√£o Otimizadas (Atualiza√ß√£o Autom√°tica)"

# Define os eventos que ir√£o disparar a execu√ß√£o deste workflow
on:
  # Configura√ß√£o do agendamento autom√°tico do workflow
  schedule:
  # Agenda a execu√ß√£o di√°ria ao meia-noite (12:00) no hor√°rio UTC
  # A sintaxe usa padr√£o cron com 5 campos (minuto hora dia m√™s dia-da-semana)
    - cron: '0 3 * * *'
      timezone: 'America/Fortaleza'  # Usa o mesmo fuso que Bras√≠lia (UTC-3)
  # Explica√ß√£o detalhada da sintaxe cron:
  # - '0'    - no minuto 0 (em ponto)
  # - '3'   - √†s 3 horas UTC (que equivalem a 0h em Fortaleza)
  # - '*'    - todos os dias do m√™s
  # - '*'    - todos os meses do ano
  # - '*'    - todos os dias da semana (de domingo a s√°bado)
  
  # Observa√ß√µes importantes:
  # 1. O hor√°rio √© sempre em UTC (Tempo Universal Coordenado)
  # 2. O GitHub pode atrasar em at√© 15 minutos a execu√ß√£o agendada
  # 3. O workflow n√£o ser√° executado se n√£o houver altera√ß√µes no reposit√≥rio,
  #    a menos que voc√™ configure para rodar sempre

  # Permite acionar manualmente o workflow atrav√©s da interface do GitHub
  # Aparecer√° um bot√£o "Run workflow" na interface Actions
  workflow_dispatch:

# Configura as permiss√µes necess√°rias para este workflow
permissions:
  # Permiss√£o para escrever no reposit√≥rio (necess√°rio para fazer commits)
  # N√≠vel de permiss√£o: write (escrita)
  contents: write

# Lista de jobs (tarefas) que ser√£o executados como parte deste workflow
jobs:
  # Primeiro job - respons√°vel por baixar e processar as playlists
  # Identificador modificado (sem emoji para evitar problemas)
  download_playlists:
    # Nome amig√°vel que ser√° exibido na interface (pode conter emoji)
    name: "üì• Download e processamento"
    
    # Define o sistema operacional onde o job ser√° executado
    # ubuntu-latest = vers√£o mais recente do Ubuntu dispon√≠vel
    runs-on: ubuntu-latest

    # Lista de passos (etapas) que ser√£o executados sequencialmente
    steps:
      # ================================
      # Passo 1: Fazer checkout (clonar) do reposit√≥rio
      # ================================
      - name: "üîΩ Checkout do reposit√≥rio"
        # Usa a a√ß√£o oficial do GitHub para checkout (vers√£o 4)
        uses: actions/checkout@v4
        with:
          # Configura√ß√£o de seguran√ßa: n√£o persistir credenciais
          persist-credentials: false
          # Baixa todo o hist√≥rico de commits (necess√°rio para opera√ß√µes git posteriores)
          # 0 = baixa todo o hist√≥rico
          fetch-depth: 0

      # ================================
      # Passo 2: Configurar o ambiente Python
      # ================================
      - name: "üêç Configurar Python"
        # Usa a a√ß√£o oficial de setup do Python (vers√£o 4)
        uses: actions/setup-python@v4
        with:
          # Define a vers√£o espec√≠fica do Python a ser usada (3.8)
          python-version: '3.8'

      # ================================
      # Passo 3: Configurar cache para depend√™ncias pip
      # ================================
      # Isso acelera execu√ß√µes futuras ao reutilizar pacotes j√° baixados
      - name: "üì¶ Cache de depend√™ncias pip"
        # Usa a a√ß√£o oficial de cache (vers√£o 3)
        uses: actions/cache@v3
        with:
          # Caminho onde o pip armazena os pacotes baixados
          path: ~/.cache/pip
          # Chave √∫nica para o cache baseada em:
          # - Sistema operacional (runner.os)
          # - Hash do arquivo requirements.txt (se existir)
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          # Chaves alternativas para tentar restaurar o cache
          # caso a chave principal n√£o exista
          restore-keys: |
            ${{ runner.os }}-pip-

      # ================================
      # Passo 4: Instalar depend√™ncias Python necess√°rias
      # ================================
      - name: "‚öôÔ∏è Instalar depend√™ncias"
        # Comandos que ser√£o executados no shell
        run: |
          # Atualiza o pip para a vers√£o mais recente
          python -m pip install --upgrade pip
          # Instala o pacote requests (necess√°rio para os scripts)
          pip install requests

      # ================================
      # Passo 5: Executar o primeiro script Python (playlists2.py)
      # ================================
      # - name: "‚ñ∂Ô∏è Executar playlists2.py"
        # Comando para executar o script Python
        # run: python playlists2.py
      
      # ================================
      # Passo 6: Executar o segundo script Python (playlists.py)
      # ================================
      - name: "‚ñ∂Ô∏è Executar playlists.py"
        run: python playlists.py
      
      # ================================
      # Passo 7: Executar o terceiro script Python (Playlist.py)
      # ================================
      # - name: "‚ñ∂Ô∏è Executar Playlist.py"
        # run: python playlists.py
      
      # ================================
      # Passo 8: Adicionar timestamp nos arquivos gerados
      # ================================
      - name: "‚è±Ô∏è Adicionar data/hora nos arquivos"
        run: |
          # Loop por todos os arquivos .m3u e .xml.gz no diret√≥rio raiz
          # -maxdepth 1 = procura apenas no diret√≥rio atual
          # -type f = apenas arquivos (n√£o diret√≥rios)
          # -name "*.m3u" -o -name "*.xml.gz" = arquivos com essas extens√µes
          for file in $(find . -maxdepth 1 -type f -name "*.m3u" -o -name "*.xml.gz"); do
            # Adiciona um coment√°rio com a data/hora atual:
            # - TZ='America/Fortaleza' = define o fuso hor√°rio (BRT)
            # date '+%d/%m/%Y - %H:%M:%S' = formato da data
            # >> "$file" = adiciona ao final do arquivo
            echo -e "\n\n# Atualizado em $(TZ='America/Fortaleza' date '+%d/%m/%Y - %H:%M:%S') BRT" >> "$file"
          done

      # ================================
      # Passo 9: Verificar se houve altera√ß√µes nos arquivos
      # ================================
      - name: "üîç Verificar altera√ß√µes no Git"
        # Define um ID para referenciar este passo posteriormente
        id: git_status
        run: |
          # Verifica se h√° mudan√ßas n√£o commitadas:
          # git status --porcelain = formato simplificado para scripts
          # O if verifica se a sa√≠da n√£o est√° vazia (-n)
          if [[ -n "$(git status --porcelain .)" ]]; then
            # Se houver mudan√ßas, define uma vari√°vel de ambiente 'changes' como true
            # $GITHUB_ENV = arquivo especial onde vari√°veis de ambiente s√£o definidas
            echo "changes=true" >> $GITHUB_ENV
          else
            # Se n√£o houver mudan√ßas, define como false
            echo "changes=false" >> $GITHUB_ENV
          fi

      # ================================
      # Passo 10: Fazer commit e push das altera√ß√µes (se houver mudan√ßas)
      # ================================
      - name: "üíæ Salvar altera√ß√µes no GitHub"
        # Condicional - s√≥ executa se houver mudan√ßas (changes == 'true')
        if: env.changes == 'true'
        # Define vari√°veis de ambiente espec√≠ficas para este passo
        env:
          # Usa um token de acesso pessoal armazenado nos secrets do reposit√≥rio
          # secrets.MY_PAGES_GITHUB_TOKEN = nome do segredo que cont√©m o token
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          # Configura o usu√°rio do git (necess√°rio para fazer commits)
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Adiciona todos os arquivos modificados ao staging area
          git add .
          
          # Cria um commit com uma mensagem padr√£o
          git commit -m "üîÑ Atualiza√ß√£o autom√°tica dos arquivos baixados"
          
          # Faz pull das altera√ß√µes remotas (se houver) para evitar conflitos
          # --no-rebase = evita rebase autom√°tico
          # || true = ignora erros (caso n√£o haja altera√ß√µes remotas)
          git pull origin main --no-rebase || true
          
          # Faz push das altera√ß√µes para o reposit√≥rio:
          # Usa o token de autentica√ß√£o (GITHUB_TOKEN)
          # ${{ github.repository }} = nome do reposit√≥rio (ex: usuario/repo)
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git main

      # ================================
      # Passo 11: Listar arquivos gerados (√∫til para debug)
      # ================================
      - name: "üìÇ Listar arquivos gerados"
        # Comando para listar todos os arquivos no diret√≥rio atual
        # -la = formato longo, mostra todos os arquivos (incluindo ocultos)
        run: ls -la

      # ================================
      # Passo 12: Mensagem de sucesso (executa apenas se todos os passos anteriores foram bem sucedidos)
      # ================================
      - name: "‚úÖ Tudo certo!"
        # Condicional - s√≥ executa se o workflow foi bem sucedido at√© este ponto
        if: success()
        # Simples mensagem no log
        run: echo "Workflow executado com sucesso!"

      # ================================
      # Passo 13: Mensagem de falha (executa apenas se algum passo anterior falhou)
      # ================================
      - name: "‚ùå Ops, algo deu errado!"
        # Condicional - s√≥ executa se houve falha em algum passo anterior
        if: failure()
        # Mensagem de erro no log
        run: echo "Workflow falhou!"